name: Network performance GKE

# Any change in triggers needs to be reflected in the concurrency group.
on:
  schedule:
    - cron: '39 0 * * 1-5'
  push:
    branches:
      - add_net_perf_ci

# By specifying the access of one of the scopes, all of those that are not
# specified are set to 'none'.
permissions:
  # To be able to access the repository with actions/checkout
  contents: read

concurrency:
  # Structure:
  # - Workflow name
  # - Event type
  # - A unique identifier depending on event type:
  #   - schedule: SHA
  #   - workflow_dispatch: PR number
  #
  # This structure ensures a unique concurrency group name is generated for each
  # type of testing, such that re-runs will cancel the previous run.
  group: |
    ${{ github.workflow }}
    ${{ github.event_name }}
    ${{
      (github.event_name == 'schedule' && github.sha) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.PR-number)
    }}
  cancel-in-progress: true

env:
  clusterName: ${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ github.run_id }}-${{ github.run_attempt }}
  cilium_cli_ci_version:
  CILIUM_CLI_MODE: helm
  test_name: gke-perf
  check_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
  USE_GKE_GCLOUD_AUTH_PLUGIN: True
  GCP_PERF_RESULTS_BUCKET: gs://cilium-scale-results

jobs:
  generate-matrix:
    name: Generate Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout context ref (trusted)
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.context-ref || github.sha }}
          persist-credentials: false

      - name: Convert YAML to JSON
        run: |
          work_dir=".github/actions/gke"
          destination_directory="/tmp/generated/gke"
          mkdir -p "${destination_directory}"

          ls ${work_dir}/*.yaml | grep -v 'schema\|classic' | while read file;do
            filename=$(basename "$file")
            new_filename="${filename%.yaml}.json"
            yq -o=json "${file}" | jq . > "${destination_directory}/${new_filename}"
          done
          
          # Merge 2 files into one
          jq -s "add" ${destination_directory}/*.json > "${destination_directory}/gke.json"

      - name: Generate Matrix
        id: set-matrix
        run: |
          cd /tmp/generated/gke
          jq '{ "k8s": [ .k8s[] | select(.default) ], "config": .config}' gke.json > /tmp/matrix.json
          echo "Generated matrix:"
          cat /tmp/matrix.json
          echo "matrix=$(jq -c . < /tmp/matrix.json)" >> $GITHUB_OUTPUT

  installation-and-perf:
    name: Installation and Perf Test
    needs: generate-matrix
    runs-on: ubuntu-latest
    timeout-minutes: 75
    env:
      job_name: "Installation and Perf Test"
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}

    steps:
      - name: Checkout context ref (trusted)
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.context-ref || github.sha }}
          persist-credentials: false

      - name: Set Environment Variables
        uses: ./.github/actions/set-env-variables

      - name: Get Cilium's default values
        id: default_vars
        uses: ./.github/actions/helm-default
        with:
          image-tag: ${{ inputs.SHA }}

      - name: Set up job variables
        id: vars
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            OWNER="${{ inputs.PR-number }}"
          else
            OWNER="${{ github.ref_name }}"
            OWNER="${OWNER/./-}"
          fi

          CILIUM_INSTALL_DEFAULTS="${{ steps.default_vars.outputs.cilium_install_defaults }} \
            --cluster-name=${{ env.clusterName }}-${{ matrix.config.index }} \
            --helm-set=agentNotReadyTaintKey=ignore-taint.cluster-autoscaler.kubernetes.io/cilium-agent-not-ready \
            --helm-set loadBalancer.l7.backend=envoy \
            --helm-set tls.secretsBackend=k8s \
            --wait=false"

          echo cilium_install_defaults=${CILIUM_INSTALL_DEFAULTS} >> $GITHUB_OUTPUT
          echo sha=${{ steps.default_vars.outputs.sha }} >> $GITHUB_OUTPUT
          echo owner=${OWNER} >> $GITHUB_OUTPUT

      # Warning: since this is a privileged workflow, subsequent workflow job
      # steps must take care not to execute untrusted code.
      - name: Checkout pull request branch (NOT TRUSTED)
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ steps.vars.outputs.sha }}
          persist-credentials: false

      - name: Install Cilium CLI
        uses: cilium/cilium-cli@32109b32259a487c803648a3c9463cdcafa4c0c3 # v0.15.19
        with:
          repository: ${{ env.CILIUM_CLI_RELEASE_REPO }}
          release-version: ${{ env.CILIUM_CLI_VERSION }}
          ci-version: ${{ env.cilium_cli_ci_version }}

      - name: Set up gcloud credentials
        id: 'auth'
        uses: google-github-actions/auth@67e9c72af6e0492df856527b474995862b7b6591 # v2.0.0
        with:
          credentials_json: '${{ secrets.GCP_PR_SA_KEY }}'

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@825196879a077b7efa50db2e88409f44de4635c2 # v2.0.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          version: "405.0.0"

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Display gcloud CLI info
        run: |
          gcloud info

      - name: Create GKE cluster
        run: |
          gcloud container clusters create ${{ env.clusterName }}-${{ matrix.config.index }} \
            --labels "usage=${{ github.repository_owner }}-${{ github.event.repository.name }},owner=${{ steps.vars.outputs.owner }}" \
            --zone ${{ matrix.k8s.zone }} \
            --cluster-version ${{ matrix.k8s.version }} \
            --enable-ip-alias \
            --create-subnetwork="range=/26" \
            --cluster-ipv4-cidr="/21" \
            --services-ipv4-cidr="/24" \
            --image-type COS_CONTAINERD \
            --num-nodes 2 \
            --machine-type n2-standard-2 \
            --disk-type pd-standard \
            --disk-size 20GB \
            --node-taints ignore-taint.cluster-autoscaler.kubernetes.io/cilium-agent-not-ready=true:NoExecute

      - name: Get cluster credentials
        run: |
          gcloud container clusters get-credentials ${{ env.clusterName }}-${{ matrix.config.index }} --zone ${{ matrix.k8s.zone }}

      - name: Wait for images to be available
        timeout-minutes: 30
        shell: bash
        run: |
          for image in cilium-ci operator-generic-ci hubble-relay-ci ; do
            until docker manifest inspect quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/$image:${{ steps.vars.outputs.sha }} &> /dev/null; do sleep 45s; done
          done

      - name: Create custom IPsec secret
        if: ${{ matrix.config.type == 'ipsec' || matrix.config.type == 'tunnel-ipsec' }}
        run: |
          kubectl create -n kube-system secret generic cilium-ipsec-keys --from-literal=keys="15 rfc4106(gcm(aes)) $(echo $(dd if=/dev/urandom count=20 bs=1 2> /dev/null | xxd -p -c 64)) 128"

      - name: Install Cilium
        id: install-cilium
        run: |
          cilium install ${{ steps.vars.outputs.cilium_install_defaults }} ${{ matrix.config.cilium-install-opts }}

      - name: Wait for Cilium to be ready
        run: |
          cilium status --wait --wait-duration=10m
          kubectl get pods -n kube-system
          kubectl -n kube-system exec daemonset/cilium -- cilium-dbg status

      - name: Run perf test (${{ matrix.k8s.version }}, ${{ matrix.config.index }}, ${{ matrix.config.type }})
        id: run-perf
        run: |
          mkdir output
          cilium connectivity perf --duration=30s --host-net=true --pod-net=true --report-dir=./output

      - name: Get sysdump
        if: ${{ always() && steps.run-perf.outcome != 'skipped' && steps.run-perf.outcome != 'cancelled' }}
        run: |
          cilium status
          cilium sysdump --output-filename cilium-sysdump-final

      - name: Clean up GKE
        if: ${{ always() }}
        run: |
          while [ "$(gcloud container operations list --zone ${{ matrix.k8s.zone }} --filter="status=RUNNING AND targetLink~${{ env.clusterName }}-${{ matrix.config.index }}" --format="value(name)")" ];do
            echo "cluster has an ongoing operation, waiting for all operations to finish"; sleep 15
          done
          gcloud container clusters delete ${{ env.clusterName }}-${{ matrix.config.index }} --zone ${{ matrix.k8s.zone }} --quiet --async
        shell: bash {0} # Disable default fail-fast behavior so that all commands run independently

      - name: Export results and sysdump to GS bucket
        if: ${{ always() && steps.run-perf.outcome != 'skipped' && steps.run-perf.outcome != 'cancelled' }}
        uses: cilium/scale-tests-action/export-results@8a522b9d71254b6f6615c296e41a70610c9615ea # main
        with:
          test_name: ${{ env.test_name }}-${{ matrix.config.index }}
          results_bucket: ${{ env.GCP_PERF_RESULTS_BUCKET }}
          artifacts: ./output/*
          other_files: cilium-sysdump-final.zip